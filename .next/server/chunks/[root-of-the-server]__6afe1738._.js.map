{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///C:/wamp64/www/whatsssss/src/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport axios from \"axios\";\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userNameOrEmailAddress, password, rememberMe } = body;\n\n    // التحقق من وجود البيانات المطلوبة\n    if (!userNameOrEmailAddress || !password) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            message: \"اسم المستخدم وكلمة المرور مطلوبان\",\n          },\n        },\n        { status: 400 }\n      );\n    }\n\n    // إرسال طلب تسجيل الدخول إلى NeoSend API\n    const config = {\n      method: \"POST\",\n      maxBodyLength: Infinity,\n      url: \"https://neosending.com/api/account/login\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"text/plain\",\n        \"User-Agent\":\n          \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36\",\n      },\n      data: JSON.stringify({\n        password: password,\n        userNameOrEmailAddress: userNameOrEmailAddress,\n        rememberMe: rememberMe || false,\n      }),\n      timeout: 10000, // 10 seconds timeout\n    };\n\n    console.log(\"Attempting login to NeoSend API...\");\n    const loginResponse = await axios.request(config);\n\n    console.log(\"NeoSend Login Response:\", loginResponse.status, loginResponse.statusText);\n    console.log(\"Login Response data:\", loginResponse.data);\n\n    const loginData = loginResponse.data;\n\n    // تحقق من نجاح تسجيل الدخول\n    if (loginData.result === 1 || loginData.description === \"Success\") {\n      console.log(\"Login successful, now getting token from /connect/token...\");\n\n      try {\n        // الحصول على التوكن من endpoint منفصل\n        // استخدام الإعدادات الصحيحة من Postman\n        const tokenConfigurations = [\n          {\n            client_id: \"Whatsapp_App\", // من Postman Environment\n            scope: \"Whatsapp\" // من Postman - Scope\n          },\n          {\n            client_id: \"Whatsapp_App\",\n            scope: \"Whatsapp api\"\n          },\n          {\n            client_id: \"Whatsapp_App\",\n            scope: \"api\"\n          },\n          {\n            client_id: \"Whatsapp_App\",\n            scope: \"Whatsapp api offline_access\"\n          }\n        ];\n\n        let tokenResponse = null;\n        let tokenError = null;\n\n        // جرب كل إعداد حتى ينجح واحد\n        for (const config of tokenConfigurations) {\n          try {\n            console.log(`Trying token config: client_id=${config.client_id}, scope=${config.scope}`);\n            \n            // إعداد Basic Auth كما في Postman\n            const basicAuth = Buffer.from(`${config.client_id}:`).toString('base64');\n            \n            const tokenConfig = {\n              method: \"post\",\n              maxBodyLength: Infinity,\n              url: \"https://neosending.com/connect/token\",\n              headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Accept: \"application/json\",\n                Authorization: `Basic ${basicAuth}` // Basic Auth header\n              },\n              data: new URLSearchParams({\n                grant_type: \"password\",\n                username: userNameOrEmailAddress,\n                password: password,\n                client_id: config.client_id,\n                scope: config.scope\n              }).toString(),\n              timeout: 10000,\n            };\n\n            tokenResponse = await axios.request(tokenConfig);\n            console.log(`Token request successful with config: ${config.client_id}`);\n            break; // إذا نجح، اخرج من الحلقة\n            \n          } catch (error: any) {\n            console.log(`Token config failed: ${config.client_id} - ${error.message}`);\n            tokenError = error;\n            continue; // جرب الإعداد التالي\n          }\n        }\n\n        if (!tokenResponse) {\n          throw tokenError || new Error('All token configurations failed');\n        }\n\n        console.log(\"Token Response:\", tokenResponse.status, tokenResponse.data);\n        \n        const tokenData = tokenResponse.data;\n\n        return NextResponse.json({\n          success: true,\n          result: {\n            accessToken: tokenData.access_token,\n            tokenType: tokenData.token_type || \"Bearer\",\n            expiresIn: tokenData.expires_in || 3600,\n            refreshToken: tokenData.refresh_token,\n            scope: tokenData.scope,\n            userId: loginData.userId || 1,\n            user: loginData.user || {\n              id: 1,\n              userName: userNameOrEmailAddress,\n              name: userNameOrEmailAddress,\n              surname: \"\",\n              emailAddress: userNameOrEmailAddress.includes(\"@\")\n                ? userNameOrEmailAddress\n                : \"\",\n              isActive: true,\n            },\n          },\n        });\n      } catch (tokenError: any) {\n        console.error(\"All token configurations failed:\", tokenError);\n\n        // إرجاع خطأ إذا فشل الحصول على التوكن\n        return NextResponse.json({\n          success: false,\n          error: {\n            message: \"فشل في الحصول على التوكن. تحقق من بيانات الاعتماد أو اتصل بالدعم الفني.\",\n            code: \"TOKEN_GENERATION_FAILED\",\n            details: {\n              loginSuccess: true,\n              tokenError: tokenError.response?.data || tokenError.message,\n              status: tokenError.response?.status\n            }\n          }\n        });\n      }\n    } else {\n      // إذا كانت الاستجابة تشير إلى فشل في تسجيل الدخول\n      return NextResponse.json({\n        success: false,\n        error: {\n          message: loginData.error?.message || \"فشل في تسجيل الدخول\",\n          code: loginData.error?.code || \"LOGIN_FAILED\",\n        },\n      });\n    }\n  } catch (error: any) {\n    console.error(\"Login API Error:\", error);\n\n    // التعامل مع أخطاء axios\n    if (error.response) {\n      // الخادم أرجع استجابة مع كود خطأ\n      console.error(\n        \"Response error:\",\n        error.response.status,\n        error.response.data\n      );\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            message:\n              error.response.data?.error?.message ||\n              \"خطأ في بيانات تسجيل الدخول\",\n            code: error.response.status,\n          },\n        },\n        { status: error.response.status }\n      );\n    } else if (error.request) {\n      // الطلب تم إرساله لكن لم يتم استلام استجابة\n      console.error(\"Request error:\", error.request);\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            message: \"فشل في الاتصال بخادم NeoSend. تحقق من الاتصال بالإنترنت.\",\n            code: \"NETWORK_ERROR\",\n          },\n        },\n        { status: 503 }\n      );\n    } else {\n      // خطأ في إعداد الطلب\n      console.error(\"Setup error:\", error.message);\n      return NextResponse.json(\n        {\n          success: false,\n          error: {\n            message: \"حدث خطأ غير متوقع. يرجى المحاولة مرة أخرى.\",\n            code: \"UNKNOWN_ERROR\",\n          },\n        },\n        { status: 500 }\n      );\n    }\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}